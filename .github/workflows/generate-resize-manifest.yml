name: Optimize and Resize Images

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  optimize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install sharp fs-extra path

      - name: Optimize and resize images
        run: |
          node <<'EOF'
          import fs from "fs-extra";
          import path from "path";
          import sharp from "sharp";

          const ROOT_DIR = ".";
          const MAX_SIZE_KB = 500;
          const TARGET_SIZE_KB = 300;
          const TARGET_SCALE = 0.3333;

          async function processImage(filePath) {
            const stats = await fs.stat(filePath);
            const sizeKB = stats.size / 1024;

            if (sizeKB < MAX_SIZE_KB) return; // Already fine

            console.log(`Processing large image: ${filePath} (${Math.round(sizeKB)} KB)`);

            const image = sharp(filePath);
            const metadata = await image.metadata();

            let width = metadata.width;
            let height = metadata.height;

            // Resize only if image is huge
            if (width > 2000 || height > 2000) {
              width = Math.round(width * TARGET_SCALE);
              height = Math.round(height * TARGET_SCALE);
              console.log(` → Resizing to ${width}x${height}`);
              await image.resize(width, height).jpeg({ quality: 80 }).toFile(filePath + ".tmp");
            } else {
              // Just optimize (no resize)
              console.log(` → Optimizing without resize`);
              await image.jpeg({ quality: 80 }).toFile(filePath + ".tmp");
            }

            await fs.rename(filePath + ".tmp", filePath);
          }

          async function walkDir(dir) {
            const entries = await fs.readdir(dir, { withFileTypes: true });
            const result = [];
            for (const entry of entries) {
              const fullPath = path.join(dir, entry.name);
              if (entry.isDirectory()) {
                result.push({
                  name: entry.name,
                  type: "directory",
                  children: await walkDir(fullPath),
                });
              } else if (entry.isFile()) {
                result.push({
                  name: entry.name,
                  type: "file",
                  path: fullPath.replace(/^\.?\//, ""),
                });
                if (/\.(jpg|jpeg|png|webp)$/i.test(entry.name)) {
                  await processImage(fullPath);
                }
              }
            }
            return result;
          }

          (async () => {
            const manifest = await walkDir(ROOT_DIR);
            await fs.writeJson("manifest.json", manifest, { spaces: 2 });
            console.log("✅ manifest.json updated successfully");
          })();
          EOF

      - name: Commit and push changes if any
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add .
            git commit -m "Resize new images and update manifest.json"
            git push
          else
            echo "No changes to commit"
          fi
