name: Smart Resize & Optimize Images

on:
  push:
    branches: [ main ]
    paths:
      - 'images/**'

permissions:
  contents: write

jobs:
  optimize-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick

      - name: Process large images
        run: |
          echo "Scanning for large images..."

          find ./images -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" \) | while read file; do
            size_bytes=$(stat -c%s "$file")
            size_kb=$((size_bytes / 1024))

            if [ "$size_kb" -ge 4096 ]; then
              echo "ðŸ“‰ $file is ${size_kb}KB â†’ resizing to 25% and optimizing..."
              mogrify -resize 25% -strip -quality 85 "$file"
            elif [ "$size_kb" -ge 2048 ]; then
              echo "ðŸ“‰ $file is ${size_kb}KB â†’ resizing to 33% and optimizing..."
              mogrify -resize 33% -strip -quality 85 "$file"
            elif [ "$size_kb" -ge 1024 ]; then
              echo "ðŸ“‰ $file is ${size_kb}KB â†’ resizing to 50% and optimizing..."
              mogrify -resize 50% -strip -quality 85 "$file"
            elif [ "$size_kb" -ge 512 ]; then
              echo "âœ¨ $file is ${size_kb}KB â†’ optimizing only..."
              mogrify -strip -quality 85 "$file"
            else
              echo "âœ… $file is ${size_kb}KB â†’ already optimized, skipping."
            fi
          done

      - name: Generate manifest.json
        run: |
          echo "Generating manifest.json..."
          python3 <<'EOF'
          import os, json
          root = "images"
          manifest = {}

          for dirpath, _, files in os.walk(root):
              images = [os.path.join(dirpath, f).replace("\\", "/")
                        for f in files
                        if f.lower().endswith((".jpg", ".jpeg", ".png", ".gif", ".webp"))]
              if images:
                  key = os.path.relpath(dirpath, root)
                  manifest[key if key != "." else "root"] = images

          with open("manifest.json", "w", encoding="utf-8") as f:
              json.dump(manifest, f, indent=2)
          EOF

      - name: Commit and push changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add .
            git commit -m "Smart resize & optimize images + update manifest"
            git push
          else
            echo "No image changes to commit."
